[global]
    ### Display ###
    font = Karla 10
    # Which monitor should the notifications be displayed on.
    monitor = 0
    # Display notification on focused monitor.  Possible modes are:
    #   mouse: follow mouse pointer
    #   keyboard: follow window with keyboard focus
    #   none: don't follow anything
    #
    # "keyboard" needs a window manager that exports the
    # _NET_ACTIVE_WINDOW property.
    # This should be the case for almost all modern window managers.
    #
    # If this option is set to mouse or keyboard, the monitor option
    # will be ignored.
    follow = mouse

    # The geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    # The geometry of the message window.
    # The height is measured in number of notifications everything else
    # in pixels.  If the width is omitted but the height is given
    # ("-geometry x2"), the message window expands over the whole screen
    # (dmenu-like).  If width is 0, the window expands to the longest
    # message displayed.  A positive x is measured from the left, a
    # negative from the right side of the screen.  Y is measured from
    # the top and down respectively.
    # The width can be negative.  In this case the actual width is the
    # screen width minus the width defined in within the geometry option.
    geometry = "800x0-0+32"

    # Show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # Shrink window if it's smaller than the width.  Will be ignored if
    # width is 0.
    shrink = yes

    # The transparency of the window.  Range: [0; 100].
    # This option will only work if a compositing window manager is
    # present (e.g. xcompmgr, compiz, etc.).
    transparency = 30

    # The height of the entire notification.  If the height is smaller
    # than the font height and padding combined, it will be raised
    # to the font height and padding.
    notification_height = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    separator_height = 0

    # Padding between text and separator.
    padding = 16

    # Horizontal padding.
    horizontal_padding = 16

    # Defines width in pixels of frame around the notification window.
    # Set to 0 to disable.
    frame_width = 0

    # Defines color of the frame around the notification window.
    frame_color = "#333333"

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a X color.
    separator_color = frame

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    # Set to 0 to disable.
    # Transient notifications ignore this setting.
    idle_threshold = 120

    ### Text ###
    # The spacing between lines.  If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 4

    # Possible values are:
    # full: Allow a small subset of html markup in notifications:
    #        <b>bold</b>
    #        <i>italic</i>
    #        <s>strikethrough</s>
    #        <u>underline</u>
    #
    #        For a complete reference see
    #        <http://developer.gnome.org/pango/stable/PangoMarkupFormat.html>.
    #
    # strip: This setting is provided for compatibility with some broken
    #        clients that send markup even though it's not enabled on the
    #        server. Dunst will try to strip the markup but the parsing is
    #        simplistic so using this option outside of matching rules for
    #        specific applications *IS GREATLY DISCOURAGED*.
    #
    # no:    Disable markup parsing, incoming notifications will be treated as
    #        plain text. Dunst will not advertise that it has the body-markup
    #        capability if this is set as a global setting.
    #
    # It's important to note that markup inside the format option will be parsed
    # regardless of what this is set to.
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<span weight='heavy'>%s</span>\n%b"

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = yes

    # When word_wrap is set to no, specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no

    # Stack together notifications with the same content
    stack_duplicates = true

    # Hide the count of stacked notifications with the same content
    hide_duplicate_count = true

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    ### Icons ###
    # Align icons left/right/off
    icon_position = left

    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = 32

    # Paths to default icons.
    icon_path = /usr/share/icons/Paper/16x16/status/:/usr/share/icons/Paper/16x16/devices/

    ### History ###
    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = yes

    # Maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###
    # dmenu path.
    dmenu = /usr/bin/rofi -dmenu -p dunst:

    # Browser for opening urls in context menu.
    #browser = /usr/bin/firefox -new-tab
    # print a notification on startup
    # This is mainly for error detection, since dbus (re-)starts dunst
    # automatically after a crash.
    startup_notification = true


#[global]
#    font = System San Francisco Display 8
#
#    # allow a small subset of html markup:
#    # <b>bold</b>
#    # <i>italic</i>
#    # <s>strikethrough<s/>
#    # <u>underline</u>
#    #
#    # for a complete reference see http://developer.gnome.org/pango/stable/PangoMarkupFormat.html
#    # If markup is not allowed, those tags will be stripped out of the message.
#    allow_markup = yes
#
#    # The format of the message. Possible variables are:
#    #   %a  appname
#    #   %s  summary
#    #   %b  body
#    #   %i  iconname (including its path)
#    #   %I  iconname (without its path)
#    #   %p  progress value if set ([  0%] to [100%]) or nothing
#    # Markup is allowed
#    format = "<b>%a:</b> %s\n%b"
#
#    # Sort messages by urgency
#    sort = yes
#
#    # Show how many messages are currently hidden (because of geometry)
#    indicate_hidden = yes
#
#    # alignment of message text.
#    # Possible values are "left", "center" and "right"
#    alignment = left
#
#    # The frequency with wich text that is longer than the notification
#    # window allows bounces back and forth.
#    # This option conflicts with 'word_wrap'.
#    # Set to 0 to disable
#    bounce_freq = 0
#
#    # show age of message if message is older than show_age_threshold seconds.
#    # set to -1 to disable
#    show_age_threshold = 60
#
#    # split notifications into multiple lines if they don't fit into geometry
#    word_wrap = yes
#
#    # ignore newlines '\n' in notifications
#    ignore_newline = no
#
#
#    # the geometry of the window
#    # geometry [{width}]x{height}][+/-{x}+/-{y}]
#    # The geometry of the message window.
#    # The height is measured in number of notifications everything else in pixels. If the width
#    # is omitted but the height is given ("-geometry x2"), the message window
#    # expands over the whole screen (dmenu-like). If width is 0,
#    # the window expands to the longest message displayed.
#    # A positive x is measured from the left, a negative from the
#    # right side of the screen.  Y is measured from the top and down respectevly.
#    # The width can be negative. In this case the actual width is the
#    # screen width minus the width defined in within the geometry option.
#    geometry = "300x5-30+20"
#
#    # The transparency of the window. range: [0; 100]
#    # This option will only work if a compositing windowmanager is present (e.g. xcompmgr, compiz, etc..)
#    transparency = .8
#
#    # Don't remove messages, if the user is idle (no mouse or keyboard input)
#    # for longer than idle_threshold seconds.
#    # Set to 0 to disable.
#    idle_threshold = 120
#
#    # Which monitor should the notifications be displayed on.
#    monitor = 0
#
#    # Display notification on focused monitor. Possible modes are:
#    # mouse: follow mouse pointer
#    # keyboard: follow window with keyboard focus
#    # none: don't follow anything
#    #
#    # "keyboard" needs a windowmanager that exports the _NET_ACTIVE_WINDOW property.
#    # This should be the case for almost all modern windowmanagers.
#    #
#    # If this option is set to mouse or keyboard, the monitor option will be
#    # ignored.
#    follow = keyboard
#
#    # should a notification popped up from history be sticky or
#    # timeout as if it would normally do.
#    sticky_history = yes
#
#    # The height of a single line. If the height is smaller than the font height,
#    # it will get raised to the font height.
#    # This adds empty space above and under the text.
#    line_height = 0
#
#    # Draw a line of 'separatpr_height' pixel height between two notifications.
#    # Set to 0 to disable
#    separator_height = 2
#
#    # padding between text and separator
#    padding = 8
#
#    # horizontal padding
#    horizontal_padding = 8
#
#    # Define a color for the separator.
#    # possible values are:
#    #  * auto: dunst tries to find a color fitting to the background
#    #  * foreground: use the same color as the foreground
#    #  * frame: use the same color as the frame.
#    #  * anything else will be interpreted as a X color
#    separator_color = frame
#
#    # print a notification on startup
#    # This is mainly for error detection, since dbus (re-)starts dunst
#    # automatically after a crash.
#    startup_notification = true
#
#    # dmenu path
#    dmenu = /usr/bin/dmenu -p dunst:
#
#    # browser for opening urls in context menu
#    browser = /usr/bin/firefox -new-tab
#
    [frame]
        width = 0
        color = "#000000"

    [shortcuts]
        # shortcuts are specified as [modifier+][modifier+]...key
        # available modifiers are 'ctrl', 'mod1' (the alt-key), 'mod2', 'mod3'
        # and 'mod4' (windows-key)
        # xev might be helpful to find names for keys

        # close notification
        close = mod4+m

        # close all notifications
        close_all = mod4+shift+m

        # redisplay last message(s)
        history = mod4+n

        # context menu
        context = mod4+shift+i

    [urgency_low]
        # IMPORTANT: colors have to be defined in quotation marks.
        # Otherwise the '#' and following  would be interpreted as a comment.
        background = "#222222"
        foreground = "#888888"
        timeout = 10

    [urgency_normal]
        background = "#0f1419"
        foreground = "#e6e1cf"
        timeout = 10

    [urgency_critical]
        background = "#900000"
        foreground = "#ffffff"
        timeout = 0

## Every section that isn't one of the above is interpreted as a rules
## to override settings for certain messages.
## Messages can be matched by 'appname', 'summary', 'body' or 'icon'
## and you can override the 'timeout', 'urgency', 'foreground', 'background'
## and 'format'.
## Shell-like globbing will get expanded.
##
## SCRIPTING
## you can specify a script that gets run when the rule matches by setting
## the 'script' option.
## The script will be called as follows:
## script appname summary body icon urgency
## where urgency can be "LOW", "NORMAL" or "CRITICAL".
##
## NOTE: if you don't want a notification to be displayed, set the format to ""
## NOTE: It might be helpful to run dunst -print in a terminal in order to find
## fitting options for rules.
#
##[espeak]
##    summary = "*"
##    script = dunst_espeak.sh
#
##[script-test]
##    summary = "*script*"
##    script = dunst_test.sh
#
##[ignore]
### This notification will not be displayed
##    summary = "foobar"
##    format = ""
#
#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#    format  = "%s "%b""
#
#[music]
#    appname = Amarok
#    summary = "Now playing"
#    urgency = low
#
##[twitter]
##    appname = Pidgin
##    summary = *twitter.com*
##    urgency = normal
##
#
